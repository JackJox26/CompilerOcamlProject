State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On OBJECT shift to state 1
-- On prog shift to state 66
-- On objetIsole shift to state 67
-- On objet shift to state 68
-- On lObjets shift to state 70
## Reductions:
-- On ACCOLADE_G
--   reduce production lObjets ->

State 1:
## Known stack suffix:
## OBJECT
## LR(1) items:
objetIsole -> OBJECT . NOMCLASSE option(bloc) corpsObjet [ OBJECT ACCOLADE_G ]
## Transitions:
-- On NOMCLASSE shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## OBJECT NOMCLASSE
## LR(1) items:
objetIsole -> OBJECT NOMCLASSE . option(bloc) corpsObjet [ OBJECT ACCOLADE_G ]
## Transitions:
-- On ACCOLADE_G shift to state 3
-- On option(bloc) shift to state 51
-- On bloc shift to state 65
## Reductions:
-- On IS
--   reduce production option(bloc) ->

State 3:
## Known stack suffix:
## ACCOLADE_G
## LR(1) items:
bloc -> ACCOLADE_G . optLInstruc ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
bloc -> ACCOLADE_G . lDeclVar IS lInstruc ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On RETURN shift to state 5
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On IF shift to state 23
-- On ID shift to state 32
-- On CSTE shift to state 10
-- On ACCOLADE_G shift to state 3
-- On optLInstruc shift to state 36
-- On lInstruc shift to state 38
-- On lIdent shift to state 39
-- On lDeclVar shift to state 43
-- On instruc shift to state 47
-- On expr shift to state 29
-- On declVar shift to state 49
-- On bloc shift to state 31
## Reductions:
-- On ACCOLADE_D
--   reduce production optLInstruc ->

State 4:
## Known stack suffix:
## STR
## LR(1) items:
expr -> STR . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> STR

State 5:
## Known stack suffix:
## RETURN
## LR(1) items:
instruc -> RETURN . POINTVIRGULE [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On POINTVIRGULE shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## RETURN POINTVIRGULE
## LR(1) items:
instruc -> RETURN POINTVIRGULE . [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production instruc -> RETURN POINTVIRGULE

State 7:
## Known stack suffix:
## PLUS
## LR(1) items:
expr -> PLUS . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 22
## Reductions:

State 8:
## Known stack suffix:
## MOINS
## LR(1) items:
expr -> MOINS . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 11
## Reductions:

State 9:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> ID

State 10:
## Known stack suffix:
## CSTE
## LR(1) items:
expr -> CSTE . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> CSTE

State 11:
## Known stack suffix:
## MOINS expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> MOINS expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> MOINS expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 12:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr PLUS expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> expr PLUS expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 14:
## Known stack suffix:
## expr MUL
## LR(1) items:
expr -> expr MUL . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## expr MUL expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr MUL expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> expr MUL expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 16:
## Known stack suffix:
## expr MOINS
## LR(1) items:
expr -> expr MOINS . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## expr MOINS expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr MOINS expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> expr MOINS expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 18:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr DIV expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> expr DIV expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 20:
## Known stack suffix:
## expr CONCAT
## LR(1) items:
expr -> expr CONCAT . expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## expr CONCAT expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr CONCAT expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> expr CONCAT expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 22:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> PLUS expr . [ THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
## Transitions:
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:
-- On THEN POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> PLUS expr
** Conflict on PLUS MUL MOINS DIV CONCAT

State 23:
## Known stack suffix:
## IF
## LR(1) items:
instruc -> IF . expr THEN instruc ELSE instruc [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ THEN PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ THEN PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ THEN PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ THEN PLUS MUL MOINS DIV CONCAT ]
instruc -> IF expr . THEN instruc ELSE instruc [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On THEN shift to state 25
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:

State 25:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
instruc -> IF expr THEN . instruc ELSE instruc [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On RETURN shift to state 5
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On IF shift to state 23
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On ACCOLADE_G shift to state 3
-- On instruc shift to state 26
-- On expr shift to state 29
-- On bloc shift to state 31
## Reductions:

State 26:
## Known stack suffix:
## IF expr THEN instruc
## LR(1) items:
instruc -> IF expr THEN instruc . ELSE instruc [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On ELSE shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## IF expr THEN instruc ELSE
## LR(1) items:
instruc -> IF expr THEN instruc ELSE . instruc [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On RETURN shift to state 5
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On IF shift to state 23
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On ACCOLADE_G shift to state 3
-- On instruc shift to state 28
-- On expr shift to state 29
-- On bloc shift to state 31
## Reductions:

State 28:
## Known stack suffix:
## IF expr THEN instruc ELSE instruc
## LR(1) items:
instruc -> IF expr THEN instruc ELSE instruc . [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production instruc -> IF expr THEN instruc ELSE instruc

State 29:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MOINS expr [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . MUL expr [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . DIV expr [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
expr -> expr . CONCAT expr [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
instruc -> expr . POINTVIRGULE [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On POINTVIRGULE shift to state 30
-- On PLUS shift to state 12
-- On MUL shift to state 14
-- On MOINS shift to state 16
-- On DIV shift to state 18
-- On CONCAT shift to state 20
## Reductions:

State 30:
## Known stack suffix:
## expr POINTVIRGULE
## LR(1) items:
instruc -> expr POINTVIRGULE . [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production instruc -> expr POINTVIRGULE

State 31:
## Known stack suffix:
## bloc
## LR(1) items:
instruc -> bloc . [ STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IF ID ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production instruc -> bloc

State 32:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ POINTVIRGULE PLUS MUL MOINS DIV CONCAT ]
lIdent -> ID . [ DEUXPOINTS ]
lIdent -> ID . VIRGULE lIdent [ DEUXPOINTS ]
## Transitions:
-- On VIRGULE shift to state 33
## Reductions:
-- On POINTVIRGULE PLUS MUL MOINS DIV CONCAT
--   reduce production expr -> ID
-- On DEUXPOINTS
--   reduce production lIdent -> ID

State 33:
## Known stack suffix:
## ID VIRGULE
## LR(1) items:
lIdent -> ID VIRGULE . lIdent [ DEUXPOINTS ]
## Transitions:
-- On ID shift to state 34
-- On lIdent shift to state 35
## Reductions:

State 34:
## Known stack suffix:
## ID
## LR(1) items:
lIdent -> ID . [ DEUXPOINTS ]
lIdent -> ID . VIRGULE lIdent [ DEUXPOINTS ]
## Transitions:
-- On VIRGULE shift to state 33
## Reductions:
-- On DEUXPOINTS
--   reduce production lIdent -> ID

State 35:
## Known stack suffix:
## ID VIRGULE lIdent
## LR(1) items:
lIdent -> ID VIRGULE lIdent . [ DEUXPOINTS ]
## Transitions:
## Reductions:
-- On DEUXPOINTS
--   reduce production lIdent -> ID VIRGULE lIdent

State 36:
## Known stack suffix:
## ACCOLADE_G optLInstruc
## LR(1) items:
bloc -> ACCOLADE_G optLInstruc . ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On ACCOLADE_D shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## ACCOLADE_G optLInstruc ACCOLADE_D
## LR(1) items:
bloc -> ACCOLADE_G optLInstruc ACCOLADE_D . [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production bloc -> ACCOLADE_G optLInstruc ACCOLADE_D

State 38:
## Known stack suffix:
## lInstruc
## LR(1) items:
optLInstruc -> lInstruc . [ ACCOLADE_D ]
## Transitions:
## Reductions:
-- On ACCOLADE_D
--   reduce production optLInstruc -> lInstruc

State 39:
## Known stack suffix:
## lIdent
## LR(1) items:
declVar -> lIdent . deType [ IS ID ]
## Transitions:
-- On DEUXPOINTS shift to state 40
-- On deType shift to state 42
## Reductions:

State 40:
## Known stack suffix:
## DEUXPOINTS
## LR(1) items:
deType -> DEUXPOINTS . NOMCLASSE [ VAR IS ID ACCOLADE_D ]
## Transitions:
-- On NOMCLASSE shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## DEUXPOINTS NOMCLASSE
## LR(1) items:
deType -> DEUXPOINTS NOMCLASSE . [ VAR IS ID ACCOLADE_D ]
## Transitions:
## Reductions:
-- On VAR IS ID ACCOLADE_D
--   reduce production deType -> DEUXPOINTS NOMCLASSE

State 42:
## Known stack suffix:
## lIdent deType
## LR(1) items:
declVar -> lIdent deType . [ IS ID ]
## Transitions:
## Reductions:
-- On IS ID
--   reduce production declVar -> lIdent deType

State 43:
## Known stack suffix:
## ACCOLADE_G lDeclVar
## LR(1) items:
bloc -> ACCOLADE_G lDeclVar . IS lInstruc ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On IS shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## ACCOLADE_G lDeclVar IS
## LR(1) items:
bloc -> ACCOLADE_G lDeclVar IS . lInstruc ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On RETURN shift to state 5
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On IF shift to state 23
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On ACCOLADE_G shift to state 3
-- On lInstruc shift to state 45
-- On instruc shift to state 47
-- On expr shift to state 29
-- On bloc shift to state 31
## Reductions:

State 45:
## Known stack suffix:
## ACCOLADE_G lDeclVar IS lInstruc
## LR(1) items:
bloc -> ACCOLADE_G lDeclVar IS lInstruc . ACCOLADE_D [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
-- On ACCOLADE_D shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## ACCOLADE_G lDeclVar IS lInstruc ACCOLADE_D
## LR(1) items:
bloc -> ACCOLADE_G lDeclVar IS lInstruc ACCOLADE_D . [ STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D ]
## Transitions:
## Reductions:
-- On STR RETURN PLUS MOINS IS IF ID EOF ELSE CSTE ACCOLADE_G ACCOLADE_D
--   reduce production bloc -> ACCOLADE_G lDeclVar IS lInstruc ACCOLADE_D

State 47:
## Known stack suffix:
## instruc
## LR(1) items:
lInstruc -> instruc . [ ACCOLADE_D ]
lInstruc -> instruc . lInstruc [ ACCOLADE_D ]
## Transitions:
-- On STR shift to state 4
-- On RETURN shift to state 5
-- On PLUS shift to state 7
-- On MOINS shift to state 8
-- On IF shift to state 23
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On ACCOLADE_G shift to state 3
-- On lInstruc shift to state 48
-- On instruc shift to state 47
-- On expr shift to state 29
-- On bloc shift to state 31
## Reductions:
-- On ACCOLADE_D
--   reduce production lInstruc -> instruc

State 48:
## Known stack suffix:
## instruc lInstruc
## LR(1) items:
lInstruc -> instruc lInstruc . [ ACCOLADE_D ]
## Transitions:
## Reductions:
-- On ACCOLADE_D
--   reduce production lInstruc -> instruc lInstruc

State 49:
## Known stack suffix:
## declVar
## LR(1) items:
lDeclVar -> declVar . [ IS ]
lDeclVar -> declVar . lDeclVar [ IS ]
## Transitions:
-- On ID shift to state 34
-- On lIdent shift to state 39
-- On lDeclVar shift to state 50
-- On declVar shift to state 49
## Reductions:
-- On IS
--   reduce production lDeclVar -> declVar

State 50:
## Known stack suffix:
## declVar lDeclVar
## LR(1) items:
lDeclVar -> declVar lDeclVar . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production lDeclVar -> declVar lDeclVar

State 51:
## Known stack suffix:
## OBJECT NOMCLASSE option(bloc)
## LR(1) items:
objetIsole -> OBJECT NOMCLASSE option(bloc) . corpsObjet [ OBJECT ACCOLADE_G ]
## Transitions:
-- On IS shift to state 52
-- On corpsObjet shift to state 64
## Reductions:

State 52:
## Known stack suffix:
## IS
## LR(1) items:
corpsObjet -> IS . ACCOLADE_G lChamp ACCOLADE_D [ OBJECT ACCOLADE_G ]
## Transitions:
-- On ACCOLADE_G shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## IS ACCOLADE_G
## LR(1) items:
corpsObjet -> IS ACCOLADE_G . lChamp ACCOLADE_D [ OBJECT ACCOLADE_G ]
## Transitions:
-- On VAR shift to state 54
-- On lChamp shift to state 60
-- On champ shift to state 62
## Reductions:
-- On ACCOLADE_D
--   reduce production lChamp ->

State 54:
## Known stack suffix:
## VAR
## LR(1) items:
champ -> VAR . boption(AUTO) param [ VAR ACCOLADE_D ]
## Transitions:
-- On AUTO shift to state 55
-- On boption(AUTO) shift to state 56
## Reductions:
-- On ID
--   reduce production boption(AUTO) ->

State 55:
## Known stack suffix:
## AUTO
## LR(1) items:
boption(AUTO) -> AUTO . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production boption(AUTO) -> AUTO

State 56:
## Known stack suffix:
## VAR boption(AUTO)
## LR(1) items:
champ -> VAR boption(AUTO) . param [ VAR ACCOLADE_D ]
## Transitions:
-- On ID shift to state 57
-- On param shift to state 59
## Reductions:

State 57:
## Known stack suffix:
## ID
## LR(1) items:
param -> ID . deType [ VAR ACCOLADE_D ]
## Transitions:
-- On DEUXPOINTS shift to state 40
-- On deType shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## ID deType
## LR(1) items:
param -> ID deType . [ VAR ACCOLADE_D ]
## Transitions:
## Reductions:
-- On VAR ACCOLADE_D
--   reduce production param -> ID deType

State 59:
## Known stack suffix:
## VAR boption(AUTO) param
## LR(1) items:
champ -> VAR boption(AUTO) param . [ VAR ACCOLADE_D ]
## Transitions:
## Reductions:
-- On VAR ACCOLADE_D
--   reduce production champ -> VAR boption(AUTO) param

State 60:
## Known stack suffix:
## IS ACCOLADE_G lChamp
## LR(1) items:
corpsObjet -> IS ACCOLADE_G lChamp . ACCOLADE_D [ OBJECT ACCOLADE_G ]
## Transitions:
-- On ACCOLADE_D shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## IS ACCOLADE_G lChamp ACCOLADE_D
## LR(1) items:
corpsObjet -> IS ACCOLADE_G lChamp ACCOLADE_D . [ OBJECT ACCOLADE_G ]
## Transitions:
## Reductions:
-- On OBJECT ACCOLADE_G
--   reduce production corpsObjet -> IS ACCOLADE_G lChamp ACCOLADE_D

State 62:
## Known stack suffix:
## champ
## LR(1) items:
lChamp -> champ . lChamp [ ACCOLADE_D ]
## Transitions:
-- On VAR shift to state 54
-- On lChamp shift to state 63
-- On champ shift to state 62
## Reductions:
-- On ACCOLADE_D
--   reduce production lChamp ->

State 63:
## Known stack suffix:
## champ lChamp
## LR(1) items:
lChamp -> champ lChamp . [ ACCOLADE_D ]
## Transitions:
## Reductions:
-- On ACCOLADE_D
--   reduce production lChamp -> champ lChamp

State 64:
## Known stack suffix:
## OBJECT NOMCLASSE option(bloc) corpsObjet
## LR(1) items:
objetIsole -> OBJECT NOMCLASSE option(bloc) corpsObjet . [ OBJECT ACCOLADE_G ]
## Transitions:
## Reductions:
-- On OBJECT ACCOLADE_G
--   reduce production objetIsole -> OBJECT NOMCLASSE option(bloc) corpsObjet

State 65:
## Known stack suffix:
## bloc
## LR(1) items:
option(bloc) -> bloc . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production option(bloc) -> bloc

State 66:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 67:
## Known stack suffix:
## objetIsole
## LR(1) items:
objet -> objetIsole . [ OBJECT ACCOLADE_G ]
## Transitions:
## Reductions:
-- On OBJECT ACCOLADE_G
--   reduce production objet -> objetIsole

State 68:
## Known stack suffix:
## objet
## LR(1) items:
lObjets -> objet . lObjets [ ACCOLADE_G ]
## Transitions:
-- On OBJECT shift to state 1
-- On objetIsole shift to state 67
-- On objet shift to state 68
-- On lObjets shift to state 69
## Reductions:
-- On ACCOLADE_G
--   reduce production lObjets ->

State 69:
## Known stack suffix:
## objet lObjets
## LR(1) items:
lObjets -> objet lObjets . [ ACCOLADE_G ]
## Transitions:
## Reductions:
-- On ACCOLADE_G
--   reduce production lObjets -> objet lObjets

State 70:
## Known stack suffix:
## lObjets
## LR(1) items:
prog -> lObjets . bloc EOF [ # ]
## Transitions:
-- On ACCOLADE_G shift to state 3
-- On bloc shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## lObjets bloc
## LR(1) items:
prog -> lObjets bloc . EOF [ # ]
## Transitions:
-- On EOF shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## lObjets bloc EOF
## LR(1) items:
prog -> lObjets bloc EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> lObjets bloc EOF

