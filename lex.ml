# 3 "lex.mll"
 
open Ast
open Parse
open Lexing
exception Eof
exception Eof_dans_Str
exception Eof_dans_commentaire

(* gere les positions numero de ligne + decalage dans la ligne *)
let next_line lexbuf = Lexing.new_line lexbuf

(* Potentiellement utile pour distinguer mots-clef et vrais identificateurs *)
let keyword_table = Hashtbl.create 16

let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
      [ "if", IF;
        "then", THEN;
        "else", ELSE;
        "is", IS;
        "var", VAR;
        "class", CLASS;
        "extends", EXTENDS;
        "auto", AUTO;
        "def", DEF;
        "new", NEW;
        "return", RETURN;
        "object", OBJECT
      ]

# 33 "lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\229\255\231\255\002\000\030\000\237\255\
    \238\255\239\255\240\255\241\255\242\255\243\255\245\255\246\255\
    \247\255\031\000\249\255\078\000\051\000\252\255\253\255\088\000\
    \163\000\251\255\248\255\234\255\230\255\232\255\052\000\253\255\
    \254\255\048\000\255\255\090\000\252\255\253\255\254\255\255\255\
    \207\000\247\255\248\255\249\255\250\255\251\255\252\255\253\255\
    \254\255\255\255";
  Lexing.lex_backtrk =
   "\005\000\255\255\255\255\255\255\255\255\022\000\020\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\011\000\255\255\005\000\019\000\255\255\255\255\001\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
    \000\000\255\255\000\000\036\000\000\000\000\000\000\000\000\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\021\000\000\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\000\000\018\000\000\000\000\000\000\000\003\000\000\000\
    \016\000\015\000\007\000\009\000\012\000\008\000\013\000\020\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\017\000\014\000\005\000\004\000\006\000\029\000\
    \028\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\027\000\026\000\025\000\033\000\034\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\011\000\039\000\010\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\038\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\049\000\000\000\
    \002\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
    \000\000\047\000\000\000\000\000\032\000\046\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
    \000\000\044\000\000\000\043\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\017\000\020\000\030\000\033\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\035\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\035\000\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\040\000\255\255\
    \000\000\255\255\255\255\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\040\000\255\255\255\255\255\255\255\255\
    \255\255\040\000\255\255\255\255\030\000\040\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\040\000\255\255\255\255\
    \255\255\040\000\255\255\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\000\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 49 "lex.mll"
                     id
# 201 "lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "lex.mll"
                         ( 
                        try 
                            Hashtbl.find keyword_table id
                        with
                            Not_found ->                        
                                ID id 
                        )
# 211 "lex.ml"

  | 1 ->
let
# 58 "lex.mll"
                       nomclasse
# 217 "lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 58 "lex.mll"
                                    (
                                        NOMCLASSE nomclasse
                                    )
# 223 "lex.ml"

  | 2 ->
# 61 "lex.mll"
                         ( token lexbuf )
# 228 "lex.ml"

  | 3 ->
# 62 "lex.mll"
                         ( next_line lexbuf; token lexbuf)
# 233 "lex.ml"

  | 4 ->
# 63 "lex.mll"
           (
                            (* lance la fonction specialisée dans la
                             * reconnaissance des commentaires
                             *)
                            comment lexbuf
                         )
# 243 "lex.ml"

  | 5 ->
let
# 72 "lex.mll"
                 i
# 249 "lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 72 "lex.mll"
                   ( CSTE (int_of_string i) )
# 253 "lex.ml"

  | 6 ->
# 75 "lex.mll"
        (
            string_parse (Buffer.create 17) lexbuf
         )
# 260 "lex.ml"

  | 7 ->
# 79 "lex.mll"
         ( AFFECT )
# 265 "lex.ml"

  | 8 ->
# 81 "lex.mll"
        ( PARENT_G )
# 270 "lex.ml"

  | 9 ->
# 82 "lex.mll"
        ( PARENT_D )
# 275 "lex.ml"

  | 10 ->
# 83 "lex.mll"
        ( POINTVIRGULE )
# 280 "lex.ml"

  | 11 ->
# 84 "lex.mll"
        ( DEUXPOINTS )
# 285 "lex.ml"

  | 12 ->
# 85 "lex.mll"
        ( POINT )
# 290 "lex.ml"

  | 13 ->
# 86 "lex.mll"
        ( VIRGULE )
# 295 "lex.ml"

  | 14 ->
# 88 "lex.mll"
        ( ACCOLADE_G )
# 300 "lex.ml"

  | 15 ->
# 89 "lex.mll"
        ( ACCOLADE_D )
# 305 "lex.ml"

  | 16 ->
# 91 "lex.mll"
        ( PLUS )
# 310 "lex.ml"

  | 17 ->
# 92 "lex.mll"
        ( MOINS )
# 315 "lex.ml"

  | 18 ->
# 93 "lex.mll"
        ( MUL )
# 320 "lex.ml"

  | 19 ->
# 94 "lex.mll"
        ( DIV )
# 325 "lex.ml"

  | 20 ->
# 96 "lex.mll"
        ( OPERATEUR(Ast.PG) )
# 330 "lex.ml"

  | 21 ->
# 97 "lex.mll"
         ( OPERATEUR(Ast.PGE) )
# 335 "lex.ml"

  | 22 ->
# 98 "lex.mll"
        ( OPERATEUR(Ast.PP) )
# 340 "lex.ml"

  | 23 ->
# 99 "lex.mll"
         ( OPERATEUR(Ast.PPE) )
# 345 "lex.ml"

  | 24 ->
# 100 "lex.mll"
        ( OPERATEUR(Ast.EGAL) )
# 350 "lex.ml"

  | 25 ->
# 101 "lex.mll"
         ( OPERATEUR(Ast.NEGAL) )
# 355 "lex.ml"

  | 26 ->
# 103 "lex.mll"
        ( CONCAT )
# 360 "lex.ml"

  | 27 ->
# 105 "lex.mll"
        ( EOF )
# 365 "lex.ml"

  | 28 ->
let
# 106 "lex.mll"
         lxm
# 371 "lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 106 "lex.mll"
                         ( (* On met un message et on essaye de scanner la 
                            * suite. pour détecter le plus d'erreurs possibles
                            * d'un coup. Il faudrait probablement mémoriser
                            * qu'on a rencontré une erreur pour signaler à la
                            * fin que le programme était incorrect.
                            *)
             		   print_endline
                             ("undefined character: " ^ (String.make 1 lxm));
                           token lexbuf
           	         )
# 384 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 121 "lex.mll"
                  ( (* quand on a reconnu la fin du commentaire, on relance
                     * recursivement l'analyseur lexical pour renvoyer le
                     * prochain token à l'analyseur syntaxique puisqu'on ne
                     * transmet pas les commentaires
                     *)
                     token lexbuf
                  )
# 402 "lex.ml"

  | 1 ->
# 128 "lex.mll"
                  (
                       raise (Eof_dans_commentaire) 
                  )
# 409 "lex.ml"

  | 2 ->
# 131 "lex.mll"
                  ( comment lexbuf )
# 414 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string_parse buf lexbuf =
   __ocaml_lex_string_parse_rec buf lexbuf 35
and __ocaml_lex_string_parse_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 135 "lex.mll"
                  (
                        STR (Buffer.contents buf)
                  )
# 428 "lex.ml"

  | 1 ->
# 138 "lex.mll"
                  (
                        eat_next buf lexbuf
                  )
# 435 "lex.ml"

  | 2 ->
# 141 "lex.mll"
                  (
                       raise (Eof_dans_Str) 
                  )
# 442 "lex.ml"

  | 3 ->
let
# 144 "lex.mll"
         c
# 448 "lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 144 "lex.mll"
                  (
                        Buffer.add_char buf c;
                        string_parse buf lexbuf
                  )
# 455 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_parse_rec buf lexbuf __ocaml_lex_state

and eat_next buf lexbuf =
   __ocaml_lex_eat_next_rec buf lexbuf 40
and __ocaml_lex_eat_next_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "lex.mll"
                  (
                        Buffer.add_char buf '/';
                        string_parse buf lexbuf
                  )
# 470 "lex.ml"

  | 1 ->
# 155 "lex.mll"
                   (
                        Buffer.add_char buf '\\';
                        string_parse buf lexbuf
                  )
# 478 "lex.ml"

  | 2 ->
# 159 "lex.mll"
                  (
                        Buffer.add_char buf '\b';
                        string_parse buf lexbuf
                  )
# 486 "lex.ml"

  | 3 ->
# 163 "lex.mll"
                  (
                        Buffer.add_char buf '\012';
                        string_parse buf lexbuf
                  )
# 494 "lex.ml"

  | 4 ->
# 167 "lex.mll"
                  (
                        Buffer.add_char buf '\n';
                        string_parse buf lexbuf
                  )
# 502 "lex.ml"

  | 5 ->
# 171 "lex.mll"
                  (
                        Buffer.add_char buf '\r';
                        string_parse buf lexbuf
                  )
# 510 "lex.ml"

  | 6 ->
# 175 "lex.mll"
                  (
                        Buffer.add_char buf '\t';
                        string_parse buf lexbuf
                  )
# 518 "lex.ml"

  | 7 ->
# 179 "lex.mll"
                  (
                       raise (Eof_dans_Str) 
                  )
# 525 "lex.ml"

  | 8 ->
let
# 182 "lex.mll"
         c
# 531 "lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 182 "lex.mll"
                  (
                        Buffer.add_char buf c;
                        string_parse buf lexbuf
                  )
# 538 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_eat_next_rec buf lexbuf __ocaml_lex_state

;;

